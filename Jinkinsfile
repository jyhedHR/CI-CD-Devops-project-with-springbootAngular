pipeline {
    agent any
 environment {
         DOCKER_IMAGE = "jihedlourassi/gestion-station-ski"
         DOCKER_TAG = "latest"


     }

    tools {
        maven 'M2_HOME'
    }

    stages {
        stage('Hello Test') {
            steps {
                echo 'Hi Jihed lourassi'
            }
        }

        stage('Git Checkout') {
            steps {
                git branch: 'Jihed_Lourassi_4TWIN5',
                    url: 'https://github.com/jyhedHR/4twin5_Group2_gestion-station-skier.git',
                    credentialsId: 'Git'
            }
        }

        stage('Clean compile') {
            steps {
                sh 'mvn clean compile'
            }
        }


        stage(' test Projet') {
            steps {
                 sh 'mvn -Dtest=SubscriptionServicesImplTest clean test '
             }
        }



        stage('SonarQube') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'mvn sonar:sonar'
                }
            }
        }

        stage('Package Projet') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }
          stage('Build Docker Image') {
                    steps {
                        sh 'sudo docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .'  // Removed sudo
                    }
                }


                  stage('Push Docker Image') {
                       steps {
                // Use the credentials stored in Jenkins
                withCredentials([string(credentialsId: 'DockerHub', variable: 'DockerHub')]) {
                    // Log in to Docker Hub using the access token
                    sh 'echo $DockerHub | sudo docker login -u jihedlourassi --password-stdin'

                    // Tag the image for pushing to Docker Hub
                    sh "sudo docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:${DOCKER_TAG}"

                    // Push the tagged image to Docker Hub
                    sh "sudo docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
                }


      stage('Deploy') {
                  steps {
                      sh 'mvn deploy -DskipTests'
                  }
              }
 stage('Docker Compose Up') {
                    steps {
                     sh 'sudo docker compose down -v'
                           sh 'sudo docker compose build'
                           sh 'sudo docker compose up '
                    }
                }



}


}